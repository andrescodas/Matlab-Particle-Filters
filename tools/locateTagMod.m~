function [weightedTags,globalQuality] = weightNormalizeTags(polarModel,detections,inferingTags,robotByParticules,numberParticules,inertia,antennas)

if (nargin<7)
    antennas = 8;
    if (nargin<6)
        inertia = 0.99;
        if (nargin<5)
            numberParticules = 500;
            if (nargin<4)
                robotByParticules = struct('particuleSet',0,'estimatedPosition',[(rand-0.5)*6 (rand-0.5)*6 (rand-0.5)*2*pi]);
                if(nargin<3)
                    inferingTags = [];
                    if(nargin<2)
                        tag = struct('tagId','xxx','position',[-inf -inf]);
                        realTags = repmat(tag,1,1);

                        tag.tagId = 'a';
                        tag.position = [0 0];
                        realTags(1) = tag;

                        tag.tagId = 'b';
                        tag.position = [4 -2];
                        realTags(2) = tag;

                        tag.tagId = 'c';
                        tag.position = [2 -1];
                        realTags(3) = tag;

                        tag.tagId = 'd';
                        tag.position = [3 1];
                        realTags(4) = tag;
                        
                        detections = rfidSimulation(robotByParticules.estimatedPosition,realTags,polarmodel);
                        if(nargin<1)
                            load polarModel
                        end
                    end
                end
            end
        end
    end
end

for tagIndex = 1:length(inferingTags);

    globalQuality = 0;

    for antenna = 0:antennas-1

        ta = searchDetection(detections,inferingTags(tagIndex).tagId,antenna);

        if(detections(ta).detected)
            [inferingTags(tagIndex).particuleSet quality] = weightTagParticules(	polarModel, ...
                inferingTags(tagIndex).particuleSet, ...
                robotByParticules.estimatedPosition, ...
                antenna, ...
                1);

        else
            [inferingTags(tagIndex).particuleSet quality] = weightTagParticules(  polarModel, ...
                inferingTags(tagIndex).particuleSet, ...
                robotByParticules.estimatedPosition, ...
                antenna, ...
                0);
        end
        globalQuality = globalQuality+quality;
    end
    globalQuality = globalQuality/antennas;
    
end

if (nargout < 1)
    plotTagsEstimation(inferingTags,robotByParticules.estimatedPosition)
end